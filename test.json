[
  {
    "Constant": {
      "id": {
        "name": "PI",
        "info": { "type_id": "FloatingPoint" },
        "position": {
          "start": [0, 6],
          "end": [0, 8],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "type_name": {
        "Literal": [
          "f64",
          {
            "start": [0, 10],
            "end": [0, 13],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "value": {
        "Num": {
          "FloatingPoint": [
            3.1415,
            { "type_id": "FloatingPoint" },
            {
              "start": [0, 16],
              "end": [0, 22],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          ]
        }
      },
      "info": { "type_id": "Void" },
      "position": {
        "start": [0, 0],
        "end": [0, 5],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "add",
        "info": {
          "type_id": {
            "Function": {
              "params": ["Integer", "Integer"],
              "return_value": "Integer"
            }
          }
        },
        "position": {
          "start": [2, 3],
          "end": [2, 6],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [
        {
          "name": {
            "name": "x",
            "info": { "type_id": "Integer" },
            "position": {
              "start": [2, 7],
              "end": [2, 8],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "i64",
              {
                "start": [2, 10],
                "end": [2, 13],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Integer" },
          "position": {
            "start": [2, 7],
            "end": [2, 8],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        },
        {
          "name": {
            "name": "y",
            "info": { "type_id": "Integer" },
            "position": {
              "start": [2, 15],
              "end": [2, 16],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "i64",
              {
                "start": [2, 18],
                "end": [2, 21],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Integer" },
          "position": {
            "start": [2, 15],
            "end": [2, 16],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "return_type": {
        "Literal": [
          "i64",
          {
            "start": [2, 24],
            "end": [2, 27],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "statements": [
        {
          "YieldingExpression": {
            "Binary": {
              "left": {
                "Id": {
                  "name": "x",
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [3, 4],
                    "end": [3, 5],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              },
              "right": {
                "Id": {
                  "name": "y",
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [3, 8],
                    "end": [3, 9],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              },
              "operator": "Add",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [3, 6],
                "end": [3, 7],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          }
        }
      ],
      "info": {
        "type_id": {
          "Function": {
            "params": ["Integer", "Integer"],
            "return_value": "Integer"
          }
        }
      },
      "position": {
        "start": [2, 0],
        "end": [2, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "explicit_return_add",
        "info": {
          "type_id": {
            "Function": {
              "params": ["Integer", "Integer"],
              "return_value": "Integer"
            }
          }
        },
        "position": {
          "start": [6, 3],
          "end": [6, 22],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [
        {
          "name": {
            "name": "x",
            "info": { "type_id": "Integer" },
            "position": {
              "start": [6, 23],
              "end": [6, 24],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "i64",
              {
                "start": [6, 26],
                "end": [6, 29],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Integer" },
          "position": {
            "start": [6, 23],
            "end": [6, 24],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        },
        {
          "name": {
            "name": "y",
            "info": { "type_id": "Integer" },
            "position": {
              "start": [6, 31],
              "end": [6, 32],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "i64",
              {
                "start": [6, 34],
                "end": [6, 37],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Integer" },
          "position": {
            "start": [6, 31],
            "end": [6, 32],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "return_type": {
        "Literal": [
          "i64",
          {
            "start": [6, 40],
            "end": [6, 43],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "statements": [
        {
          "Return": {
            "Binary": {
              "left": {
                "Id": {
                  "name": "x",
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [7, 11],
                    "end": [7, 12],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              },
              "right": {
                "Id": {
                  "name": "y",
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [7, 15],
                    "end": [7, 16],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              },
              "operator": "Add",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [7, 13],
                "end": [7, 14],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          }
        }
      ],
      "info": {
        "type_id": {
          "Function": {
            "params": ["Integer", "Integer"],
            "return_value": "Integer"
          }
        }
      },
      "position": {
        "start": [6, 0],
        "end": [6, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "StructDeclaration": {
      "id": {
        "name": "TestStruct",
        "info": { "type_id": "Void" },
        "position": {
          "start": [10, 7],
          "end": [10, 17],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "fields": [
        {
          "name": {
            "name": "x",
            "info": { "type_id": "Integer" },
            "position": {
              "start": [11, 4],
              "end": [11, 5],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "i64",
              {
                "start": [11, 7],
                "end": [11, 10],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Integer" },
          "position": {
            "start": [11, 4],
            "end": [11, 5],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        },
        {
          "name": {
            "name": "bar",
            "info": {
              "type_id": {
                "Function": {
                  "params": ["Integer", "Integer"],
                  "return_value": "Integer"
                }
              }
            },
            "position": {
              "start": [12, 4],
              "end": [12, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Fn": {
              "params": [
                {
                  "Literal": [
                    "i64",
                    {
                      "start": [12, 10],
                      "end": [12, 13],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  ]
                },
                {
                  "Literal": [
                    "i64",
                    {
                      "start": [12, 15],
                      "end": [12, 18],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  ]
                }
              ],
              "return_type": {
                "Literal": [
                  "i64",
                  {
                    "start": [12, 23],
                    "end": [12, 26],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              },
              "position": {
                "start": [12, 9],
                "end": [12, 26],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          },
          "info": {
            "type_id": {
              "Function": {
                "params": ["Integer", "Integer"],
                "return_value": "Integer"
              }
            }
          },
          "position": {
            "start": [12, 4],
            "end": [12, 7],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "info": { "type_id": "Void" },
      "position": {
        "start": [10, 0],
        "end": [10, 6],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "StructDeclaration": {
      "id": {
        "name": "Bar",
        "info": { "type_id": "Void" },
        "position": {
          "start": [15, 7],
          "end": [15, 10],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "fields": [
        {
          "name": {
            "name": "t",
            "info": {
              "type_id": {
                "Struct": [
                  "TestStruct",
                  [
                    ["x", "Integer"],
                    [
                      "bar",
                      {
                        "Function": {
                          "params": ["Integer", "Integer"],
                          "return_value": "Integer"
                        }
                      }
                    ]
                  ]
                ]
              }
            },
            "position": {
              "start": [16, 4],
              "end": [16, 5],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Literal": [
              "TestStruct",
              {
                "start": [16, 7],
                "end": [16, 17],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": {
            "type_id": {
              "Struct": [
                "TestStruct",
                [
                  ["x", "Integer"],
                  [
                    "bar",
                    {
                      "Function": {
                        "params": ["Integer", "Integer"],
                        "return_value": "Integer"
                      }
                    }
                  ]
                ]
              ]
            }
          },
          "position": {
            "start": [16, 4],
            "end": [16, 5],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "info": { "type_id": "Void" },
      "position": {
        "start": [15, 0],
        "end": [15, 6],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Instance": {
      "name": {
        "Literal": [
          "TestStruct",
          {
            "start": [19, 9],
            "end": [19, 19],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "functions": [
        {
          "id": {
            "name": "get_x",
            "info": {
              "type_id": {
                "Function": { "params": [], "return_value": "Integer" }
              }
            },
            "position": {
              "start": [22, 7],
              "end": [22, 12],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "parameters": [],
          "return_type": {
            "Literal": [
              "i64",
              {
                "start": [22, 16],
                "end": [22, 19],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "statements": [
            {
              "Return": {
                "Postfix": {
                  "PropertyAccess": {
                    "expr": {
                      "Id": {
                        "name": "this",
                        "info": {
                          "type_id": {
                            "Struct": [
                              "TestStruct",
                              [
                                ["x", "Integer"],
                                [
                                  "bar",
                                  {
                                    "Function": {
                                      "params": ["Integer", "Integer"],
                                      "return_value": "Integer"
                                    }
                                  }
                                ]
                              ]
                            ]
                          }
                        },
                        "position": {
                          "start": [23, 15],
                          "end": [23, 19],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    "property": {
                      "name": "x",
                      "info": { "type_id": "Integer" },
                      "position": {
                        "start": [23, 20],
                        "end": [23, 21],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    },
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [23, 19],
                      "end": [23, 20],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                }
              }
            }
          ],
          "info": {
            "type_id": {
              "Function": { "params": [], "return_value": "Integer" }
            }
          },
          "position": {
            "start": [22, 4],
            "end": [22, 6],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        },
        {
          "id": {
            "name": "set_x",
            "info": {
              "type_id": {
                "Function": { "params": ["Integer"], "return_value": "Void" }
              }
            },
            "position": {
              "start": [26, 7],
              "end": [26, 12],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "parameters": [
            {
              "name": {
                "name": "x",
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [26, 13],
                  "end": [26, 14],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              },
              "type_name": {
                "Literal": [
                  "i64",
                  {
                    "start": [26, 16],
                    "end": [26, 19],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              },
              "info": { "type_id": "Integer" },
              "position": {
                "start": [26, 13],
                "end": [26, 14],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          ],
          "return_type": {
            "Literal": [
              "void",
              {
                "start": [26, 22],
                "end": [26, 26],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "statements": [
            {
              "Assignment": {
                "lvalue": {
                  "Postfix": {
                    "PropertyAccess": {
                      "expr": {
                        "Id": {
                          "name": "this",
                          "info": {
                            "type_id": {
                              "Struct": [
                                "TestStruct",
                                [
                                  ["x", "Integer"],
                                  [
                                    "bar",
                                    {
                                      "Function": {
                                        "params": ["Integer", "Integer"],
                                        "return_value": "Integer"
                                      }
                                    }
                                  ]
                                ]
                              ]
                            }
                          },
                          "position": {
                            "start": [27, 8],
                            "end": [27, 12],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        }
                      },
                      "property": {
                        "name": "x",
                        "info": { "type_id": "Integer" },
                        "position": {
                          "start": [27, 13],
                          "end": [27, 14],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      },
                      "info": { "type_id": "Integer" },
                      "position": {
                        "start": [27, 12],
                        "end": [27, 13],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  }
                },
                "rvalue": {
                  "Id": {
                    "name": "x",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [27, 17],
                      "end": [27, 18],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [27, 8],
                  "end": [27, 18],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          ],
          "info": {
            "type_id": {
              "Function": { "params": ["Integer"], "return_value": "Void" }
            }
          },
          "position": {
            "start": [26, 4],
            "end": [26, 6],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "declarations": [
        {
          "id": {
            "name": "get_id",
            "info": {
              "type_id": {
                "Function": { "params": [], "return_value": "Integer" }
              }
            },
            "position": {
              "start": [20, 12],
              "end": [20, 18],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "parameter_types": [],
          "return_type": {
            "Literal": [
              "i64",
              {
                "start": [20, 22],
                "end": [20, 25],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Void" },
          "position": {
            "start": [20, 4],
            "end": [20, 26],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "info": { "type_id": "Void" },
      "position": {
        "start": [19, 0],
        "end": [29, 1],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "takes_function",
        "info": {
          "type_id": {
            "Function": {
              "params": [
                {
                  "Function": {
                    "params": ["Integer", "Integer"],
                    "return_value": "Integer"
                  }
                }
              ],
              "return_value": "Integer"
            }
          }
        },
        "position": {
          "start": [31, 3],
          "end": [31, 17],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [
        {
          "name": {
            "name": "func",
            "info": {
              "type_id": {
                "Function": {
                  "params": ["Integer", "Integer"],
                  "return_value": "Integer"
                }
              }
            },
            "position": {
              "start": [31, 18],
              "end": [31, 22],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "type_name": {
            "Fn": {
              "params": [
                {
                  "Literal": [
                    "i64",
                    {
                      "start": [31, 25],
                      "end": [31, 28],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  ]
                },
                {
                  "Literal": [
                    "i64",
                    {
                      "start": [31, 30],
                      "end": [31, 33],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  ]
                }
              ],
              "return_type": {
                "Literal": [
                  "i64",
                  {
                    "start": [31, 38],
                    "end": [31, 41],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              },
              "position": {
                "start": [31, 24],
                "end": [31, 41],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          },
          "info": {
            "type_id": {
              "Function": {
                "params": ["Integer", "Integer"],
                "return_value": "Integer"
              }
            }
          },
          "position": {
            "start": [31, 18],
            "end": [31, 22],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "return_type": {
        "Literal": [
          "i64",
          {
            "start": [31, 44],
            "end": [31, 47],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "statements": [
        {
          "YieldingExpression": {
            "Postfix": {
              "Call": {
                "expr": {
                  "Id": {
                    "name": "func",
                    "info": {
                      "type_id": {
                        "Function": {
                          "params": ["Integer", "Integer"],
                          "return_value": "Integer"
                        }
                      }
                    },
                    "position": {
                      "start": [32, 4],
                      "end": [32, 8],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "args": [
                  {
                    "Num": {
                      "Integer": [
                        42,
                        { "type_id": "Integer" },
                        {
                          "start": [32, 9],
                          "end": [32, 11],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  {
                    "Num": {
                      "Integer": [
                        69,
                        { "type_id": "Integer" },
                        {
                          "start": [32, 13],
                          "end": [32, 15],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  }
                ],
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [32, 8],
                  "end": [32, 9],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          }
        }
      ],
      "info": {
        "type_id": {
          "Function": {
            "params": [
              {
                "Function": {
                  "params": ["Integer", "Integer"],
                  "return_value": "Integer"
                }
              }
            ],
            "return_value": "Integer"
          }
        }
      },
      "position": {
        "start": [31, 0],
        "end": [31, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Instance": {
      "name": {
        "Literal": [
          "str",
          {
            "start": [35, 9],
            "end": [35, 12],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "functions": [],
      "declarations": [
        {
          "id": {
            "name": "len",
            "info": {
              "type_id": {
                "Function": { "params": [], "return_value": "Integer" }
              }
            },
            "position": {
              "start": [36, 12],
              "end": [36, 15],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          },
          "parameter_types": [],
          "return_type": {
            "Literal": [
              "i64",
              {
                "start": [36, 19],
                "end": [36, 22],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "info": { "type_id": "Void" },
          "position": {
            "start": [36, 4],
            "end": [36, 23],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      ],
      "info": { "type_id": "Void" },
      "position": {
        "start": [35, 0],
        "end": [37, 1],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "main",
        "info": {
          "type_id": { "Function": { "params": [], "return_value": "Void" } }
        },
        "position": {
          "start": [39, 3],
          "end": [39, 7],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [],
      "return_type": {
        "Literal": [
          "void",
          {
            "start": [39, 11],
            "end": [39, 15],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "statements": [
        {
          "Initialization": {
            "id": {
              "name": "a",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [40, 8],
                "end": [40, 9],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Postfix": {
                "Call": {
                  "expr": {
                    "Id": {
                      "name": "add",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [40, 12],
                        "end": [40, 15],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  },
                  "args": [
                    {
                      "Num": {
                        "Integer": [
                          42,
                          { "type_id": "Integer" },
                          {
                            "start": [40, 16],
                            "end": [40, 18],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        ]
                      }
                    },
                    {
                      "Num": {
                        "Integer": [
                          1337,
                          { "type_id": "Integer" },
                          {
                            "start": [40, 20],
                            "end": [40, 24],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        ]
                      }
                    }
                  ],
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [40, 15],
                    "end": [40, 16],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [40, 4],
              "end": [40, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "arr",
              "info": { "type_id": { "Array": "Integer" } },
              "position": {
                "start": [42, 12],
                "end": [42, 15],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": true,
            "type_name": null,
            "value": {
              "Array": {
                "Literal": {
                  "values": [
                    {
                      "Num": {
                        "Integer": [
                          42,
                          { "type_id": "Integer" },
                          {
                            "start": [42, 19],
                            "end": [42, 21],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        ]
                      }
                    },
                    {
                      "Num": {
                        "Integer": [
                          1337,
                          { "type_id": "Integer" },
                          {
                            "start": [42, 23],
                            "end": [42, 27],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        ]
                      }
                    }
                  ],
                  "info": { "type_id": { "Array": "Integer" } },
                  "position": {
                    "start": [42, 18],
                    "end": [42, 19],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [42, 4],
              "end": [42, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "arr2",
              "info": { "type_id": { "Array": "Integer" } },
              "position": {
                "start": [44, 8],
                "end": [44, 12],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Array": {
                "Default": {
                  "initial_value": {
                    "Num": {
                      "Integer": [
                        1337,
                        { "type_id": "Integer" },
                        {
                          "start": [44, 16],
                          "end": [44, 20],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  "length": {
                    "Integer": [
                      5,
                      { "type_id": "Integer" },
                      {
                        "start": [44, 22],
                        "end": [44, 23],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    ]
                  },
                  "info": { "type_id": { "Array": "Integer" } },
                  "position": {
                    "start": [44, 15],
                    "end": [44, 16],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [44, 4],
              "end": [44, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "b",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [46, 8],
                "end": [46, 9],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Postfix": {
                "Call": {
                  "expr": {
                    "Id": {
                      "name": "explicit_return_add",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [46, 12],
                        "end": [46, 31],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  },
                  "args": [
                    {
                      "Postfix": {
                        "Index": {
                          "expr": {
                            "Id": {
                              "name": "arr",
                              "info": { "type_id": { "Array": "Integer" } },
                              "position": {
                                "start": [46, 32],
                                "end": [46, 35],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            }
                          },
                          "index": {
                            "Num": {
                              "Integer": [
                                0,
                                { "type_id": "Integer" },
                                {
                                  "start": [46, 36],
                                  "end": [46, 37],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              ]
                            }
                          },
                          "info": { "type_id": "Integer" },
                          "position": {
                            "start": [46, 35],
                            "end": [46, 36],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        }
                      }
                    },
                    {
                      "Postfix": {
                        "Index": {
                          "expr": {
                            "Id": {
                              "name": "arr2",
                              "info": { "type_id": { "Array": "Integer" } },
                              "position": {
                                "start": [46, 40],
                                "end": [46, 44],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            }
                          },
                          "index": {
                            "Num": {
                              "Integer": [
                                3,
                                { "type_id": "Integer" },
                                {
                                  "start": [46, 45],
                                  "end": [46, 46],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              ]
                            }
                          },
                          "info": { "type_id": "Integer" },
                          "position": {
                            "start": [46, 44],
                            "end": [46, 45],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        }
                      }
                    }
                  ],
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [46, 31],
                    "end": [46, 32],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [46, 4],
              "end": [46, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "my_struct",
              "info": {
                "type_id": {
                  "Struct": [
                    "TestStruct",
                    [
                      ["x", "Integer"],
                      [
                        "bar",
                        {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      ]
                    ]
                  ]
                }
              },
              "position": {
                "start": [48, 8],
                "end": [48, 17],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "StructInitialisation": {
                "id": {
                  "name": "TestStruct",
                  "info": {
                    "type_id": {
                      "Struct": [
                        "TestStruct",
                        [
                          ["x", "Integer"],
                          [
                            "bar",
                            {
                              "Function": {
                                "params": ["Integer", "Integer"],
                                "return_value": "Integer"
                              }
                            }
                          ]
                        ]
                      ]
                    }
                  },
                  "position": {
                    "start": [48, 20],
                    "end": [48, 30],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                },
                "fields": [
                  {
                    "name": {
                      "name": "x",
                      "info": { "type_id": "Integer" },
                      "position": {
                        "start": [49, 8],
                        "end": [49, 9],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    },
                    "value": {
                      "Num": {
                        "Integer": [
                          42,
                          { "type_id": "Integer" },
                          {
                            "start": [49, 11],
                            "end": [49, 13],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        ]
                      }
                    },
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [49, 8],
                      "end": [49, 9],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  },
                  {
                    "name": {
                      "name": "bar",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [50, 8],
                        "end": [50, 11],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    },
                    "value": {
                      "Id": {
                        "name": "add",
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": ["Integer", "Integer"],
                              "return_value": "Integer"
                            }
                          }
                        },
                        "position": {
                          "start": [50, 13],
                          "end": [50, 16],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    "info": {
                      "type_id": {
                        "Function": {
                          "params": ["Integer", "Integer"],
                          "return_value": "Integer"
                        }
                      }
                    },
                    "position": {
                      "start": [50, 8],
                      "end": [50, 11],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                ],
                "info": {
                  "type_id": {
                    "Struct": [
                      "TestStruct",
                      [
                        ["x", "Integer"],
                        [
                          "bar",
                          {
                            "Function": {
                              "params": ["Integer", "Integer"],
                              "return_value": "Integer"
                            }
                          }
                        ]
                      ]
                    ]
                  }
                },
                "position": {
                  "start": [48, 20],
                  "end": [48, 30],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [48, 4],
              "end": [48, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "i",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [53, 12],
                "end": [53, 13],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": true,
            "type_name": null,
            "value": {
              "Num": {
                "Integer": [
                  0,
                  { "type_id": "Integer" },
                  {
                    "start": [53, 16],
                    "end": [53, 17],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [53, 4],
              "end": [53, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "WhileLoop": {
            "condition": {
              "Binary": {
                "left": {
                  "Id": {
                    "name": "i",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [55, 11],
                      "end": [55, 12],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "right": {
                  "Num": {
                    "Integer": [
                      10,
                      { "type_id": "Integer" },
                      {
                        "start": [55, 15],
                        "end": [55, 17],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    ]
                  }
                },
                "operator": "LessThan",
                "info": { "type_id": "Boolean" },
                "position": {
                  "start": [55, 13],
                  "end": [55, 14],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "block": {
              "statements": [
                {
                  "Assignment": {
                    "lvalue": {
                      "Id": {
                        "name": "i",
                        "info": { "type_id": "Integer" },
                        "position": {
                          "start": [56, 8],
                          "end": [56, 9],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    "rvalue": {
                      "Binary": {
                        "left": {
                          "Id": {
                            "name": "i",
                            "info": { "type_id": "Integer" },
                            "position": {
                              "start": [56, 12],
                              "end": [56, 13],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        },
                        "right": {
                          "Num": {
                            "Integer": [
                              1,
                              { "type_id": "Integer" },
                              {
                                "start": [56, 16],
                                "end": [56, 17],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            ]
                          }
                        },
                        "operator": "Add",
                        "info": { "type_id": "Integer" },
                        "position": {
                          "start": [56, 14],
                          "end": [56, 15],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [56, 8],
                      "end": [56, 15],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                }
              ],
              "info": { "type_id": "Integer" },
              "position": {
                "start": [55, 19],
                "end": [55, 20],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [55, 4],
              "end": [55, 9],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "x",
              "info": {
                "type_id": {
                  "Function": {
                    "params": ["Integer"],
                    "return_value": "Integer"
                  }
                }
              },
              "position": {
                "start": [59, 8],
                "end": [59, 9],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": {
              "Fn": {
                "params": [
                  {
                    "Literal": [
                      "i64",
                      {
                        "start": [59, 12],
                        "end": [59, 15],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    ]
                  }
                ],
                "return_type": {
                  "Literal": [
                    "i64",
                    {
                      "start": [59, 20],
                      "end": [59, 23],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  ]
                },
                "position": {
                  "start": [59, 11],
                  "end": [59, 23],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "value": {
              "Lambda": {
                "parameters": [
                  {
                    "name": {
                      "name": "x",
                      "info": { "type_id": "Integer" },
                      "position": {
                        "start": [59, 28],
                        "end": [59, 29],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    },
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [59, 28],
                      "end": [59, 29],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                ],
                "expression": {
                  "Id": {
                    "name": "x",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [59, 34],
                      "end": [59, 35],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "info": {
                  "type_id": {
                    "Function": {
                      "params": ["Integer"],
                      "return_value": "Integer"
                    }
                  }
                },
                "position": {
                  "start": [59, 26],
                  "end": [59, 27],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [59, 4],
              "end": [59, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "test_char",
              "info": { "type_id": "Character" },
              "position": {
                "start": [61, 8],
                "end": [61, 17],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Character": {
                "character": "a",
                "position": {
                  "start": [61, 20],
                  "end": [61, 23],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                },
                "info": { "type_id": "Character" }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [61, 4],
              "end": [61, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "foo",
              "info": { "type_id": { "Array": "Character" } },
              "position": {
                "start": [63, 12],
                "end": [63, 15],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": true,
            "type_name": null,
            "value": {
              "Array": {
                "Literal": {
                  "values": [
                    {
                      "Id": {
                        "name": "test_char",
                        "info": { "type_id": "Character" },
                        "position": {
                          "start": [63, 19],
                          "end": [63, 28],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    {
                      "Character": {
                        "character": "b",
                        "position": {
                          "start": [63, 30],
                          "end": [63, 33],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        },
                        "info": { "type_id": "Character" }
                      }
                    }
                  ],
                  "info": { "type_id": { "Array": "Character" } },
                  "position": {
                    "start": [63, 18],
                    "end": [63, 19],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [63, 4],
              "end": [63, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Assignment": {
            "lvalue": {
              "Postfix": {
                "Index": {
                  "expr": {
                    "Id": {
                      "name": "foo",
                      "info": { "type_id": { "Array": "Character" } },
                      "position": {
                        "start": [65, 4],
                        "end": [65, 7],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  },
                  "index": {
                    "Num": {
                      "Integer": [
                        1,
                        { "type_id": "Integer" },
                        {
                          "start": [65, 8],
                          "end": [65, 9],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  "info": { "type_id": "Character" },
                  "position": {
                    "start": [65, 7],
                    "end": [65, 8],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "rvalue": {
              "Id": {
                "name": "test_char",
                "info": { "type_id": "Character" },
                "position": {
                  "start": [65, 13],
                  "end": [65, 22],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "info": { "type_id": "Character" },
            "position": {
              "start": [65, 4],
              "end": [65, 22],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "test_str",
              "info": { "type_id": "String" },
              "position": {
                "start": [67, 8],
                "end": [67, 16],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "AstString": {
                "value": "test",
                "info": { "type_id": "String" },
                "position": {
                  "start": [67, 19],
                  "end": [67, 25],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [67, 4],
              "end": [67, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "len",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [69, 8],
                "end": [69, 11],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Postfix": {
                "Call": {
                  "expr": {
                    "Postfix": {
                      "PropertyAccess": {
                        "expr": {
                          "Id": {
                            "name": "test_str",
                            "info": { "type_id": "String" },
                            "position": {
                              "start": [69, 14],
                              "end": [69, 22],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        },
                        "property": {
                          "name": "len",
                          "info": {
                            "type_id": {
                              "Function": {
                                "params": [],
                                "return_value": "Integer"
                              }
                            }
                          },
                          "position": {
                            "start": [69, 23],
                            "end": [69, 26],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        },
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": [],
                              "return_value": "Integer"
                            }
                          }
                        },
                        "position": {
                          "start": [69, 22],
                          "end": [69, 23],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    }
                  },
                  "args": [],
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [69, 26],
                    "end": [69, 27],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [69, 4],
              "end": [69, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Expression": {
            "Postfix": {
              "Call": {
                "expr": {
                  "Id": {
                    "name": "takes_function",
                    "info": {
                      "type_id": {
                        "Function": {
                          "params": [
                            {
                              "Function": {
                                "params": ["Integer", "Integer"],
                                "return_value": "Integer"
                              }
                            }
                          ],
                          "return_value": "Integer"
                        }
                      }
                    },
                    "position": {
                      "start": [71, 4],
                      "end": [71, 18],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "args": [
                  {
                    "Id": {
                      "name": "add",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [71, 19],
                        "end": [71, 22],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  }
                ],
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [71, 18],
                  "end": [71, 19],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          }
        },
        {
          "Expression": {
            "Postfix": {
              "Call": {
                "expr": {
                  "Id": {
                    "name": "takes_function",
                    "info": {
                      "type_id": {
                        "Function": {
                          "params": [
                            {
                              "Function": {
                                "params": ["Integer", "Integer"],
                                "return_value": "Integer"
                              }
                            }
                          ],
                          "return_value": "Integer"
                        }
                      }
                    },
                    "position": {
                      "start": [72, 4],
                      "end": [72, 18],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                },
                "args": [
                  {
                    "Id": {
                      "name": "explicit_return_add",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [72, 19],
                        "end": [72, 38],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  }
                ],
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [72, 18],
                  "end": [72, 19],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "b",
              "info": {
                "type_id": {
                  "Struct": [
                    "Bar",
                    [
                      [
                        "t",
                        {
                          "Struct": [
                            "TestStruct",
                            [
                              ["x", "Integer"],
                              [
                                "bar",
                                {
                                  "Function": {
                                    "params": ["Integer", "Integer"],
                                    "return_value": "Integer"
                                  }
                                }
                              ]
                            ]
                          ]
                        }
                      ]
                    ]
                  ]
                }
              },
              "position": {
                "start": [74, 12],
                "end": [74, 13],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": true,
            "type_name": null,
            "value": {
              "StructInitialisation": {
                "id": {
                  "name": "Bar",
                  "info": {
                    "type_id": {
                      "Struct": [
                        "Bar",
                        [
                          [
                            "t",
                            {
                              "Struct": [
                                "TestStruct",
                                [
                                  ["x", "Integer"],
                                  [
                                    "bar",
                                    {
                                      "Function": {
                                        "params": ["Integer", "Integer"],
                                        "return_value": "Integer"
                                      }
                                    }
                                  ]
                                ]
                              ]
                            }
                          ]
                        ]
                      ]
                    }
                  },
                  "position": {
                    "start": [74, 16],
                    "end": [74, 19],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                },
                "fields": [
                  {
                    "name": {
                      "name": "t",
                      "info": {
                        "type_id": {
                          "Struct": [
                            "TestStruct",
                            [
                              ["x", "Integer"],
                              [
                                "bar",
                                {
                                  "Function": {
                                    "params": ["Integer", "Integer"],
                                    "return_value": "Integer"
                                  }
                                }
                              ]
                            ]
                          ]
                        }
                      },
                      "position": {
                        "start": [75, 8],
                        "end": [75, 9],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    },
                    "value": {
                      "StructInitialisation": {
                        "id": {
                          "name": "TestStruct",
                          "info": {
                            "type_id": {
                              "Struct": [
                                "TestStruct",
                                [
                                  ["x", "Integer"],
                                  [
                                    "bar",
                                    {
                                      "Function": {
                                        "params": ["Integer", "Integer"],
                                        "return_value": "Integer"
                                      }
                                    }
                                  ]
                                ]
                              ]
                            }
                          },
                          "position": {
                            "start": [75, 11],
                            "end": [75, 21],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        },
                        "fields": [
                          {
                            "name": {
                              "name": "x",
                              "info": { "type_id": "Integer" },
                              "position": {
                                "start": [76, 12],
                                "end": [76, 13],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            },
                            "value": {
                              "Num": {
                                "Integer": [
                                  1337,
                                  { "type_id": "Integer" },
                                  {
                                    "start": [76, 15],
                                    "end": [76, 19],
                                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                  }
                                ]
                              }
                            },
                            "info": { "type_id": "Integer" },
                            "position": {
                              "start": [76, 12],
                              "end": [76, 13],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          },
                          {
                            "name": {
                              "name": "bar",
                              "info": {
                                "type_id": {
                                  "Function": {
                                    "params": ["Integer", "Integer"],
                                    "return_value": "Integer"
                                  }
                                }
                              },
                              "position": {
                                "start": [77, 12],
                                "end": [77, 15],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            },
                            "value": {
                              "Id": {
                                "name": "add",
                                "info": {
                                  "type_id": {
                                    "Function": {
                                      "params": ["Integer", "Integer"],
                                      "return_value": "Integer"
                                    }
                                  }
                                },
                                "position": {
                                  "start": [77, 17],
                                  "end": [77, 20],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              }
                            },
                            "info": {
                              "type_id": {
                                "Function": {
                                  "params": ["Integer", "Integer"],
                                  "return_value": "Integer"
                                }
                              }
                            },
                            "position": {
                              "start": [77, 12],
                              "end": [77, 15],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        ],
                        "info": {
                          "type_id": {
                            "Struct": [
                              "TestStruct",
                              [
                                ["x", "Integer"],
                                [
                                  "bar",
                                  {
                                    "Function": {
                                      "params": ["Integer", "Integer"],
                                      "return_value": "Integer"
                                    }
                                  }
                                ]
                              ]
                            ]
                          }
                        },
                        "position": {
                          "start": [75, 11],
                          "end": [75, 21],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    },
                    "info": {
                      "type_id": {
                        "Struct": [
                          "TestStruct",
                          [
                            ["x", "Integer"],
                            [
                              "bar",
                              {
                                "Function": {
                                  "params": ["Integer", "Integer"],
                                  "return_value": "Integer"
                                }
                              }
                            ]
                          ]
                        ]
                      }
                    },
                    "position": {
                      "start": [75, 8],
                      "end": [75, 9],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  }
                ],
                "info": {
                  "type_id": {
                    "Struct": [
                      "Bar",
                      [
                        [
                          "t",
                          {
                            "Struct": [
                              "TestStruct",
                              [
                                ["x", "Integer"],
                                [
                                  "bar",
                                  {
                                    "Function": {
                                      "params": ["Integer", "Integer"],
                                      "return_value": "Integer"
                                    }
                                  }
                                ]
                              ]
                            ]
                          }
                        ]
                      ]
                    ]
                  }
                },
                "position": {
                  "start": [74, 16],
                  "end": [74, 19],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [74, 4],
              "end": [74, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Assignment": {
            "lvalue": {
              "Postfix": {
                "PropertyAccess": {
                  "expr": {
                    "Postfix": {
                      "PropertyAccess": {
                        "expr": {
                          "Id": {
                            "name": "b",
                            "info": {
                              "type_id": {
                                "Struct": [
                                  "Bar",
                                  [
                                    [
                                      "t",
                                      {
                                        "Struct": [
                                          "TestStruct",
                                          [
                                            ["x", "Integer"],
                                            [
                                              "bar",
                                              {
                                                "Function": {
                                                  "params": [
                                                    "Integer",
                                                    "Integer"
                                                  ],
                                                  "return_value": "Integer"
                                                }
                                              }
                                            ]
                                          ]
                                        ]
                                      }
                                    ]
                                  ]
                                ]
                              }
                            },
                            "position": {
                              "start": [81, 4],
                              "end": [81, 5],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        },
                        "property": {
                          "name": "t",
                          "info": {
                            "type_id": {
                              "Struct": [
                                "TestStruct",
                                [
                                  ["x", "Integer"],
                                  [
                                    "bar",
                                    {
                                      "Function": {
                                        "params": ["Integer", "Integer"],
                                        "return_value": "Integer"
                                      }
                                    }
                                  ]
                                ]
                              ]
                            }
                          },
                          "position": {
                            "start": [81, 6],
                            "end": [81, 7],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        },
                        "info": {
                          "type_id": {
                            "Struct": [
                              "TestStruct",
                              [
                                ["x", "Integer"],
                                [
                                  "bar",
                                  {
                                    "Function": {
                                      "params": ["Integer", "Integer"],
                                      "return_value": "Integer"
                                    }
                                  }
                                ]
                              ]
                            ]
                          }
                        },
                        "position": {
                          "start": [81, 5],
                          "end": [81, 6],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    }
                  },
                  "property": {
                    "name": "x",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [81, 8],
                      "end": [81, 9],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  },
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [81, 7],
                    "end": [81, 8],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "rvalue": {
              "Num": {
                "Integer": [
                  42,
                  { "type_id": "Integer" },
                  {
                    "start": [81, 12],
                    "end": [81, 14],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              }
            },
            "info": { "type_id": "Integer" },
            "position": {
              "start": [81, 4],
              "end": [81, 14],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Assignment": {
            "lvalue": {
              "Postfix": {
                "Index": {
                  "expr": {
                    "Id": {
                      "name": "arr",
                      "info": { "type_id": { "Array": "Integer" } },
                      "position": {
                        "start": [83, 4],
                        "end": [83, 7],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  },
                  "index": {
                    "Num": {
                      "Integer": [
                        5,
                        { "type_id": "Integer" },
                        {
                          "start": [83, 8],
                          "end": [83, 9],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [83, 7],
                    "end": [83, 8],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "rvalue": {
              "Num": {
                "Integer": [
                  1337,
                  { "type_id": "Integer" },
                  {
                    "start": [83, 13],
                    "end": [83, 17],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                ]
              }
            },
            "info": { "type_id": "Integer" },
            "position": {
              "start": [83, 4],
              "end": [83, 17],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Expression": {
            "Postfix": {
              "Call": {
                "expr": {
                  "Postfix": {
                    "PropertyAccess": {
                      "expr": {
                        "Postfix": {
                          "PropertyAccess": {
                            "expr": {
                              "Id": {
                                "name": "b",
                                "info": {
                                  "type_id": {
                                    "Struct": [
                                      "Bar",
                                      [
                                        [
                                          "t",
                                          {
                                            "Struct": [
                                              "TestStruct",
                                              [
                                                ["x", "Integer"],
                                                [
                                                  "bar",
                                                  {
                                                    "Function": {
                                                      "params": [
                                                        "Integer",
                                                        "Integer"
                                                      ],
                                                      "return_value": "Integer"
                                                    }
                                                  }
                                                ]
                                              ]
                                            ]
                                          }
                                        ]
                                      ]
                                    ]
                                  }
                                },
                                "position": {
                                  "start": [85, 4],
                                  "end": [85, 5],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              }
                            },
                            "property": {
                              "name": "t",
                              "info": {
                                "type_id": {
                                  "Struct": [
                                    "TestStruct",
                                    [
                                      ["x", "Integer"],
                                      [
                                        "bar",
                                        {
                                          "Function": {
                                            "params": ["Integer", "Integer"],
                                            "return_value": "Integer"
                                          }
                                        }
                                      ]
                                    ]
                                  ]
                                }
                              },
                              "position": {
                                "start": [85, 6],
                                "end": [85, 7],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            },
                            "info": {
                              "type_id": {
                                "Struct": [
                                  "TestStruct",
                                  [
                                    ["x", "Integer"],
                                    [
                                      "bar",
                                      {
                                        "Function": {
                                          "params": ["Integer", "Integer"],
                                          "return_value": "Integer"
                                        }
                                      }
                                    ]
                                  ]
                                ]
                              }
                            },
                            "position": {
                              "start": [85, 5],
                              "end": [85, 6],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        }
                      },
                      "property": {
                        "name": "bar",
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": ["Integer", "Integer"],
                              "return_value": "Integer"
                            }
                          }
                        },
                        "position": {
                          "start": [85, 8],
                          "end": [85, 11],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      },
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [85, 7],
                        "end": [85, 8],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  }
                },
                "args": [
                  {
                    "Num": {
                      "Integer": [
                        4,
                        { "type_id": "Integer" },
                        {
                          "start": [85, 12],
                          "end": [85, 13],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  {
                    "Num": {
                      "Integer": [
                        2,
                        { "type_id": "Integer" },
                        {
                          "start": [85, 15],
                          "end": [85, 16],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  }
                ],
                "info": { "type_id": "Integer" },
                "position": {
                  "start": [85, 11],
                  "end": [85, 12],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          }
        },
        {
          "Expression": {
            "Postfix": {
              "Call": {
                "expr": {
                  "Postfix": {
                    "PropertyAccess": {
                      "expr": {
                        "Postfix": {
                          "PropertyAccess": {
                            "expr": {
                              "Id": {
                                "name": "b",
                                "info": {
                                  "type_id": {
                                    "Struct": [
                                      "Bar",
                                      [
                                        [
                                          "t",
                                          {
                                            "Struct": [
                                              "TestStruct",
                                              [
                                                ["x", "Integer"],
                                                [
                                                  "bar",
                                                  {
                                                    "Function": {
                                                      "params": [
                                                        "Integer",
                                                        "Integer"
                                                      ],
                                                      "return_value": "Integer"
                                                    }
                                                  }
                                                ]
                                              ]
                                            ]
                                          }
                                        ]
                                      ]
                                    ]
                                  }
                                },
                                "position": {
                                  "start": [87, 4],
                                  "end": [87, 5],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              }
                            },
                            "property": {
                              "name": "t",
                              "info": {
                                "type_id": {
                                  "Struct": [
                                    "TestStruct",
                                    [
                                      ["x", "Integer"],
                                      [
                                        "bar",
                                        {
                                          "Function": {
                                            "params": ["Integer", "Integer"],
                                            "return_value": "Integer"
                                          }
                                        }
                                      ]
                                    ]
                                  ]
                                }
                              },
                              "position": {
                                "start": [87, 6],
                                "end": [87, 7],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            },
                            "info": {
                              "type_id": {
                                "Struct": [
                                  "TestStruct",
                                  [
                                    ["x", "Integer"],
                                    [
                                      "bar",
                                      {
                                        "Function": {
                                          "params": ["Integer", "Integer"],
                                          "return_value": "Integer"
                                        }
                                      }
                                    ]
                                  ]
                                ]
                              }
                            },
                            "position": {
                              "start": [87, 5],
                              "end": [87, 6],
                              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                            }
                          }
                        }
                      },
                      "property": {
                        "name": "set_x",
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": ["Integer"],
                              "return_value": "Void"
                            }
                          }
                        },
                        "position": {
                          "start": [87, 8],
                          "end": [87, 13],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      },
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer"],
                            "return_value": "Void"
                          }
                        }
                      },
                      "position": {
                        "start": [87, 7],
                        "end": [87, 8],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  }
                },
                "args": [
                  {
                    "Num": {
                      "Integer": [
                        1337,
                        { "type_id": "Integer" },
                        {
                          "start": [87, 14],
                          "end": [87, 18],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  }
                ],
                "info": { "type_id": "Void" },
                "position": {
                  "start": [87, 13],
                  "end": [87, 14],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              }
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "value_of_x",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [89, 8],
                "end": [89, 18],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Postfix": {
                "Call": {
                  "expr": {
                    "Postfix": {
                      "PropertyAccess": {
                        "expr": {
                          "Postfix": {
                            "PropertyAccess": {
                              "expr": {
                                "Id": {
                                  "name": "b",
                                  "info": {
                                    "type_id": {
                                      "Struct": [
                                        "Bar",
                                        [
                                          [
                                            "t",
                                            {
                                              "Struct": [
                                                "TestStruct",
                                                [
                                                  ["x", "Integer"],
                                                  [
                                                    "bar",
                                                    {
                                                      "Function": {
                                                        "params": [
                                                          "Integer",
                                                          "Integer"
                                                        ],
                                                        "return_value": "Integer"
                                                      }
                                                    }
                                                  ]
                                                ]
                                              ]
                                            }
                                          ]
                                        ]
                                      ]
                                    }
                                  },
                                  "position": {
                                    "start": [89, 21],
                                    "end": [89, 22],
                                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                  }
                                }
                              },
                              "property": {
                                "name": "t",
                                "info": {
                                  "type_id": {
                                    "Struct": [
                                      "TestStruct",
                                      [
                                        ["x", "Integer"],
                                        [
                                          "bar",
                                          {
                                            "Function": {
                                              "params": ["Integer", "Integer"],
                                              "return_value": "Integer"
                                            }
                                          }
                                        ]
                                      ]
                                    ]
                                  }
                                },
                                "position": {
                                  "start": [89, 23],
                                  "end": [89, 24],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              },
                              "info": {
                                "type_id": {
                                  "Struct": [
                                    "TestStruct",
                                    [
                                      ["x", "Integer"],
                                      [
                                        "bar",
                                        {
                                          "Function": {
                                            "params": ["Integer", "Integer"],
                                            "return_value": "Integer"
                                          }
                                        }
                                      ]
                                    ]
                                  ]
                                }
                              },
                              "position": {
                                "start": [89, 22],
                                "end": [89, 23],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            }
                          }
                        },
                        "property": {
                          "name": "get_x",
                          "info": {
                            "type_id": {
                              "Function": {
                                "params": [],
                                "return_value": "Integer"
                              }
                            }
                          },
                          "position": {
                            "start": [89, 25],
                            "end": [89, 30],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        },
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": [],
                              "return_value": "Integer"
                            }
                          }
                        },
                        "position": {
                          "start": [89, 24],
                          "end": [89, 25],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    }
                  },
                  "args": [],
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [89, 30],
                    "end": [89, 31],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [89, 4],
              "end": [89, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        },
        {
          "Initialization": {
            "id": {
              "name": "id",
              "info": { "type_id": "Integer" },
              "position": {
                "start": [91, 8],
                "end": [91, 10],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            },
            "mutable": false,
            "type_name": null,
            "value": {
              "Postfix": {
                "Call": {
                  "expr": {
                    "Postfix": {
                      "PropertyAccess": {
                        "expr": {
                          "Postfix": {
                            "PropertyAccess": {
                              "expr": {
                                "Id": {
                                  "name": "b",
                                  "info": {
                                    "type_id": {
                                      "Struct": [
                                        "Bar",
                                        [
                                          [
                                            "t",
                                            {
                                              "Struct": [
                                                "TestStruct",
                                                [
                                                  ["x", "Integer"],
                                                  [
                                                    "bar",
                                                    {
                                                      "Function": {
                                                        "params": [
                                                          "Integer",
                                                          "Integer"
                                                        ],
                                                        "return_value": "Integer"
                                                      }
                                                    }
                                                  ]
                                                ]
                                              ]
                                            }
                                          ]
                                        ]
                                      ]
                                    }
                                  },
                                  "position": {
                                    "start": [91, 13],
                                    "end": [91, 14],
                                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                  }
                                }
                              },
                              "property": {
                                "name": "t",
                                "info": {
                                  "type_id": {
                                    "Struct": [
                                      "TestStruct",
                                      [
                                        ["x", "Integer"],
                                        [
                                          "bar",
                                          {
                                            "Function": {
                                              "params": ["Integer", "Integer"],
                                              "return_value": "Integer"
                                            }
                                          }
                                        ]
                                      ]
                                    ]
                                  }
                                },
                                "position": {
                                  "start": [91, 15],
                                  "end": [91, 16],
                                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                                }
                              },
                              "info": {
                                "type_id": {
                                  "Struct": [
                                    "TestStruct",
                                    [
                                      ["x", "Integer"],
                                      [
                                        "bar",
                                        {
                                          "Function": {
                                            "params": ["Integer", "Integer"],
                                            "return_value": "Integer"
                                          }
                                        }
                                      ]
                                    ]
                                  ]
                                }
                              },
                              "position": {
                                "start": [91, 14],
                                "end": [91, 15],
                                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                              }
                            }
                          }
                        },
                        "property": {
                          "name": "get_id",
                          "info": {
                            "type_id": {
                              "Function": {
                                "params": [],
                                "return_value": "Integer"
                              }
                            }
                          },
                          "position": {
                            "start": [91, 17],
                            "end": [91, 23],
                            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                          }
                        },
                        "info": {
                          "type_id": {
                            "Function": {
                              "params": [],
                              "return_value": "Integer"
                            }
                          }
                        },
                        "position": {
                          "start": [91, 16],
                          "end": [91, 17],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      }
                    }
                  },
                  "args": [],
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [91, 23],
                    "end": [91, 24],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              }
            },
            "info": { "type_id": "Void" },
            "position": {
              "start": [91, 4],
              "end": [91, 7],
              "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
            }
          }
        }
      ],
      "info": {
        "type_id": { "Function": { "params": [], "return_value": "Void" } }
      },
      "position": {
        "start": [39, 0],
        "end": [39, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "asd",
        "info": {
          "type_id": {
            "Function": {
              "params": [],
              "return_value": {
                "Struct": [
                  "TestStruct",
                  [
                    ["x", "Integer"],
                    [
                      "bar",
                      {
                        "Function": {
                          "params": ["Integer", "Integer"],
                          "return_value": "Integer"
                        }
                      }
                    ]
                  ]
                ]
              }
            }
          }
        },
        "position": {
          "start": [94, 3],
          "end": [94, 6],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [],
      "return_type": {
        "Literal": [
          "TestStruct",
          {
            "start": [94, 10],
            "end": [94, 20],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        ]
      },
      "statements": [
        {
          "Return": {
            "StructInitialisation": {
              "id": {
                "name": "TestStruct",
                "info": {
                  "type_id": {
                    "Struct": [
                      "TestStruct",
                      [
                        ["x", "Integer"],
                        [
                          "bar",
                          {
                            "Function": {
                              "params": ["Integer", "Integer"],
                              "return_value": "Integer"
                            }
                          }
                        ]
                      ]
                    ]
                  }
                },
                "position": {
                  "start": [95, 11],
                  "end": [95, 21],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              },
              "fields": [
                {
                  "name": {
                    "name": "x",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [96, 8],
                      "end": [96, 9],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  },
                  "value": {
                    "Num": {
                      "Integer": [
                        42,
                        { "type_id": "Integer" },
                        {
                          "start": [96, 11],
                          "end": [96, 13],
                          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                        }
                      ]
                    }
                  },
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [96, 8],
                    "end": [96, 9],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                },
                {
                  "name": {
                    "name": "bar",
                    "info": {
                      "type_id": {
                        "Function": {
                          "params": ["Integer", "Integer"],
                          "return_value": "Integer"
                        }
                      }
                    },
                    "position": {
                      "start": [97, 8],
                      "end": [97, 11],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  },
                  "value": {
                    "Id": {
                      "name": "add",
                      "info": {
                        "type_id": {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      },
                      "position": {
                        "start": [97, 13],
                        "end": [97, 16],
                        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                      }
                    }
                  },
                  "info": {
                    "type_id": {
                      "Function": {
                        "params": ["Integer", "Integer"],
                        "return_value": "Integer"
                      }
                    }
                  },
                  "position": {
                    "start": [97, 8],
                    "end": [97, 11],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              ],
              "info": {
                "type_id": {
                  "Struct": [
                    "TestStruct",
                    [
                      ["x", "Integer"],
                      [
                        "bar",
                        {
                          "Function": {
                            "params": ["Integer", "Integer"],
                            "return_value": "Integer"
                          }
                        }
                      ]
                    ]
                  ]
                }
              },
              "position": {
                "start": [95, 11],
                "end": [95, 21],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          }
        }
      ],
      "info": {
        "type_id": {
          "Function": {
            "params": [],
            "return_value": {
              "Struct": [
                "TestStruct",
                [
                  ["x", "Integer"],
                  [
                    "bar",
                    {
                      "Function": {
                        "params": ["Integer", "Integer"],
                        "return_value": "Integer"
                      }
                    }
                  ]
                ]
              ]
            }
          }
        }
      },
      "position": {
        "start": [94, 0],
        "end": [94, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  },
  {
    "Function": {
      "id": {
        "name": "foobar",
        "info": {
          "type_id": {
            "Function": {
              "params": [],
              "return_value": {
                "Function": { "params": ["Integer"], "return_value": "Integer" }
              }
            }
          }
        },
        "position": {
          "start": [101, 3],
          "end": [101, 9],
          "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
        }
      },
      "parameters": [],
      "return_type": {
        "Fn": {
          "params": [
            {
              "Literal": [
                "i64",
                {
                  "start": [101, 14],
                  "end": [101, 17],
                  "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                }
              ]
            }
          ],
          "return_type": {
            "Literal": [
              "i64",
              {
                "start": [101, 22],
                "end": [101, 25],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            ]
          },
          "position": {
            "start": [101, 13],
            "end": [101, 25],
            "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
          }
        }
      },
      "statements": [
        {
          "Return": {
            "Lambda": {
              "parameters": [
                {
                  "name": {
                    "name": "x",
                    "info": { "type_id": "Integer" },
                    "position": {
                      "start": [102, 13],
                      "end": [102, 14],
                      "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                    }
                  },
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [102, 13],
                    "end": [102, 14],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              ],
              "expression": {
                "Id": {
                  "name": "x",
                  "info": { "type_id": "Integer" },
                  "position": {
                    "start": [102, 19],
                    "end": [102, 20],
                    "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
                  }
                }
              },
              "info": {
                "type_id": {
                  "Function": {
                    "params": ["Integer"],
                    "return_value": "Integer"
                  }
                }
              },
              "position": {
                "start": [102, 11],
                "end": [102, 12],
                "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
              }
            }
          }
        }
      ],
      "info": {
        "type_id": {
          "Function": {
            "params": [],
            "return_value": {
              "Function": { "params": ["Integer"], "return_value": "Integer" }
            }
          }
        }
      },
      "position": {
        "start": [101, 0],
        "end": [101, 2],
        "source": "const PI: f64 = 3.1415;\n\nfn add(x: i64, y: i64): i64 {\n    x + y\n}\n\nfn explicit_return_add(x: i64, y: i64): i64 {\n    return x + y;\n}\n\nstruct TestStruct {\n    x: i64;\n    bar: (i64, i64) -> i64;\n}\n\nstruct Bar {\n    t: TestStruct;\n}\n\ninstance TestStruct {\n    declare get_id(): i64;\n\n    fn get_x(): i64 {\n        return this.x;\n    }\n\n    fn set_x(x: i64): void {\n        this.x = x;\n    }\n}\n\nfn takes_function(func: (i64, i64) -> i64): i64 {\n    func(42, 69)\n}\n\ninstance str {\n    declare len(): i64;\n}\n\nfn main(): void {\n    let a = add(42, 1337);\n\n    let mut arr = [42, 1337];\n\n    let arr2 = [1337; 5];\n\n    let b = explicit_return_add(arr[0], arr2[3]);\n\n    let my_struct = TestStruct {\n        x: 42,\n        bar: add\n    };\n\n    let mut i = 0;\n\n    while (i < 10) {\n        i = i + 1;\n    }\n\n    let x: (i64) -> i64 = \\(x) => x;\n\n    let test_char = 'a';\n\n    let mut foo = [test_char, 'b'];\n\n    foo[1] = test_char;\n\n    let test_str = \"test\";\n\n    let len = test_str.len();\n\n    takes_function(add);\n    takes_function(explicit_return_add);\n\n    let mut b = Bar {\n        t: TestStruct {\n            x: 1337,\n            bar: add\n        }\n    };\n\n    b.t.x = 42;\n\n    arr[5] = 1337;\n\n    b.t.bar(4, 2);\n\n    b.t.set_x(1337);\n\n    let value_of_x = b.t.get_x();\n\n    let id = b.t.get_id();\n}\n\nfn asd(): TestStruct {\n    return TestStruct {\n        x: 42,\n        bar: add\n    };\n}\n\nfn foobar(): (i64) -> i64 {\n    return \\(x) => x;\n}\n"
      }
    }
  }
]
