fn takes_function(func: (i32, i32) -> i32): i32 {
    func(42, 1337)
}

fn test(x: i32): (i32) -> i32 {
    \(y) => x + y
}

fn main(): i32 {
    let foo = test(42);
    let bar = foo(1337);

    if true {
        bar()
    } else {
        foo()
    }

    let mut x = 10;

    while x > 0 {
        do_something(x);
        x = x - 1;
    }

    let baz = takes_function(\(x, y) => {
        let result = x + y;
        return result;
    });
}

let square: (i32) -> i32 = \(x) => x * x;

// declare square: (i32) -> i32;

// impl Add<i32, i32> {
//     add = \(x, y) => x + y
// }
